/**
 * @author: Mostafa Bayomi
 * bayomim@tcd.ie
 * 
 * This module reads a text file and converts it into classes from DBpedia.
 * The main method (run_vsm_system) takes a path to the text file. The text file should contain text where each sentence is in one line.
 */

var buildvsm = require('buildVSM');
var fs = require("fs");

Array.prototype.remove = function () {
    var what, a = arguments, L = a.length, ax;
    while (L && this.length) {
        what = a[--L];
        while ((ax = this.indexOf(what)) !== -1) {
            this.splice(ax, 1);
        }
    }
    return this;
};
exports.run_system = function (filePath, fileName, cb) {
    var txtFilePath = "data/text/" + filePath + "/" + fileName + "_h.txt";
    var _file = fs.readFileSync(txtFilePath);
    _file = _file.toString();
    var sentences = _file.split("\n");
    for(var i =0 ;i<sentences.length;i++){
        // just whith choi's dataset to remove the extra whitespace after each sentence
        sentences[i] = sentences[i].trim();
    }
   
    //console.log("S length: " + sentences.length);
    buildvsm.build(sentences, 0, function (vsm) {
        
        var vsmFilePath = "data/text/" + filePath + "/" + fileName + "_vsm.txt";
        var vsmTowrite = "";
        var br = "\n";
            for (var i = 0; i < vsm.length; i++) {
                var oneSentence = vsm[i];
                if (Array.isArray(oneSentence)) {
                    var oneSentenceLength = oneSentence.length;
                    var currentIndex = 0;
                    for (var j = 0; j < oneSentenceLength; j++) {
                        oneEntity = oneSentence[currentIndex];
                        oneEntity.remove("#Not_Found");
                        if (oneEntity.length == 0) {// has no classes
                            oneSentence.splice(currentIndex, 1);
                        }
                        else {
                            currentIndex++;
                        }
                    }
                    
                }
                // just a check to not add the last line break
                if (i == vsm.length - 1)
                {
                    br = "";
                }
                if (oneSentence.length == 0) {
                    vsmTowrite += "[[#Not_Found]]"+br;
                }
                else vsmTowrite += JSON.stringify(oneSentence)+br;
            }
     
        var vsmfile = fs.createWriteStream(vsmFilePath);
        vsmfile.on('error', function (err) { console.log("My_Error+VSM:" + err); });
        vsmfile.write(vsmTowrite);
        vsmfile.end();
        console.log("OK VSM is now written");
        cb();

    });
       

};