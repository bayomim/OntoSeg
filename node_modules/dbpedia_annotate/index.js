//use default endpoints
var mlspotlight = require('dbpedia-spotlight');
var _ = require("underscore");


exports.getVSM = function (input,callb) {
    //var input_out = input;

    //mlspotlight.configEndpoints(
    //  {
    //      
              
    //          confidence: 0,
              
    //     
    //  });
    mlspotlight.fixToEndpoint('english');
    mlspotlight.annotate(input, function (output) {
        //console.log("OU::::::::::::::::::::::::::::::::::");
        var resources = output.response.Resources;
        var surfaceForms = _.pluck(resources, "@surfaceForm");

        // list of entities' types
        var ontologies = [];

        var types = _.pluck(resources, "@types");

        for (var i = 0; i < types.length; i++) {
            var one_db_Ontology = [];

            if (types[i].split(",") != "") {
                var db_ontology = types[i].split(",");
                for (var j = 0; j < db_ontology.length; j++) {
                    if (db_ontology[j].indexOf("DBpedia:") > -1) {
                        one_db_Ontology.push(db_ontology[j]);
                    }
                }
            }
            else {// does not belong to any dbpedia class, so by default it is a "owl#Thing"
                one_db_Ontology.push("owl#Thing");
            }
            ontologies.push(one_db_Ontology);
        }
        callb(ontologies);
        //for (var i = 0; i < surfaceForms.length; i++) {
        //    var regex = new RegExp(surfaceForms[i]);
        //    // console.log(regex);
        //    var annotation = " dbOntoStart: " + ontologies[i] + " dbOntoEnd: " + surfaceForms[i].toUpperCase() + "\n\n";
        //    input_out = input_out.replace(regex, annotation);
        //}
        //console.log(input_out)
        //var splitted = input_out.split(". ");
        //// console.log("Len : " + splitted.length+"\n\n"+splitted[0]);
        //var vsm = [];
        //var oneSentenceOnto = [];
        //for (var i = 0; i < splitted.length; i++) {
        //    var sentence_onto = splitted[i].split("dbOntoStart:");
        //    for (var j = 0; j < sentence_onto.length; j++) {
        //        var o = sentence_onto[j].split("dbOntoEnd:");
        //        oneSentenceOnto.push(o[0]);
        //    }

        //    vsm.push(oneSentenceOnto);
        //}



        //console.log(vsm);
        // console.log("\n\n Count:" + resources.length);
        //console.log(output.response.Resources);

    })

    //use custom endpoints
    //mlspotlight.configEndpoints(
    //  {
    //      "english": {
    //          host: 'context.aksw.org',
    //          path: '/spotlight/english',
    //          port: '8080',
    //          confidence: 0,
    //          support: 0
    //      },
    //      "persian": {
    //          host: 'context.aksw.org',
    //          path: '/spotlight/persian',
    //          port: '8020',
    //          confidence: 0.5,
    //          support: 0
    //      },
    //  }
    //);
    //mlspotlight.annotate(input, function (output) {
    //    console.log(output);
    //})

    ////fix to a specific endpoint (i.e. disabling language detection)
    //mlspotlight.fixToEndpoint('german');
    ////unfix endpoint (i.e. enabling language detection)
    //mlspotlight.unfixEndpoint();
}