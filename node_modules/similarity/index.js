var fs = require('fs');
var path = require('path');
var _ = require('underscore');

// a function to walk through the sim folder
var walk = function (dir, done) {
  var results = [];
  fs.readdir(dir, function (err, list) {
    if (err) return done(err);
    var pending = list.length;
    if (!pending) return done(null, results);
    list.forEach(function (file) {
      file = path.resolve(dir, file);
      fs.stat(file, function (err, stat) {
        if (stat && stat.isDirectory()) {
          walk(file, function (err, res) {
            results = results.concat(res);
            if (!--pending) done(null, results);
          });
        } else {
          results.push(file);
          if (!--pending) done(null, results);
        }
      });
    });
  });
};
var ObjAr = [];
var Aclass = function (n, o) {
  this.name = n;
  this.others = o;
};
exports.start = function(cb){
    walk("sim", function (err, results) {
        if (err) {
         console.log("ERRRRRRRRRRRR"+err);
          //throw err;
        }
        else {
            for (var index = 0; index < results.length; index++) {
                var element = results[index];
                var className = getClassName(element);
                var oneFile = fs.readFileSync(element);
                var others = JSON.parse(oneFile);
                var oneClass = new Aclass(className, others);
                ObjAr.push(oneClass);
            }
            console.log("Similarity Object is now loaded");
            cb();
        }
    });
};
exports.sim = function (a, b) {
   //console.log("SIMMMM:");
  if (ObjAr.length <= 0) {
    //console.log("!ERROR Similarity OBJ is not loaded yet.");
  }
    if (a == b) {
     //  console.log("-----EQual:");
        return 1;
    }
    else {
      //console.log("NOT EQual:");
        var classa = _.find(ObjAr, function (obj) {
            return (obj.name == a); // first we find the class itself 'a' the first one
        });
        if (classa) {
            var classaOthers = classa.others;
            var classb = _.find(classaOthers, function (obj) {
                return (obj.b == b); // first we find the class itself 'a' the first one
            });
            if (classb) {
                return classb.sim;
            }
            else {
                return 0; // no similarity between a and b
            }
        }
        else {
            return 0; // no similarity between a and b
        }
    }
};
// a function to extract the class name from the file path
function getClassName(path) {
  var pathChunks = path.toString().split("/");
  var className = pathChunks[pathChunks.length - 1];
  className = className.replace(".txt", "");
  return className;
}