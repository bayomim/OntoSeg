var dbpedia_distance = require('dbpedia_distance');

var theArr = [];
var shortAR = [];
var cprocess = [];
exports.getShortestPath = function (n1, n2, callb) {
    var min = 10000000;
    var ar = [];
   
    if (Array.isArray(n1) && Array.isArray(n2)) {// two arrays of classes
        theArr = [];
        console.log("\n--------\nTwo Arrays\n---------------\n")
        distArr = [];
        var r = 0;
        
        shortAR = [],
            longAR = [];
        if (n1.length >= n2.length) {
            longAR = n1;
            shortAR = n2;
        }
        else {
            longAR = n2;
            shortAR = n1;
        }
        var mytimer = setInterval(tim, 500);
        var carr = [];
        for (var u = 0; u < n1.length; u++) {
            distFunction(n2, n1[u], function (distan) {
                //console.log("Dist: " + distan);
                theArr.push(distan.retArr);
                carr.push(distan.cs);
            });
        }
        var finalCarr = [];
        function tim() {
            if (theArr.length == n1.length)// all is fine
            {
                clearInterval(mytimer);
                finalCarr = [];
                for (var i = 0; i < carr.length; i++) {
                    for (var j = 0; j < carr[i].length; j++) {
                        var ind = finalCarr.indexOf(carr[i][j]);
                        if (carr[i][j] && ind == -1) {
                            finalCarr.push(carr[i][j]);
                        }
                    }
                }
                var ob = { retArr: theArr, cs: finalCarr};
                callb(ob);
            }
        }
    }
    else if (Array.isArray(n1)) { // array and node
        console.log("\n--------\nFirst is Array\n---------------\n")
        distFunction(n1, n2, callb);
    }
    else if (Array.isArray(n2)) {// node and array
        console.log("\n--------\nSecond is Array\n---------------\n")
        distFunction(n2, n1, callb);
    }
    else { // two nodes
        console.log("\n--------\nNo Arrays\n---------------\n")
        dbpedia_distance.getDistance(n1, n2, function (dist) {
            //console.log("\n--------\nNo Arrays : " + dist.distance + "\n---------------\n");
            var cls = [];
            if (n1 == n2) cls = [n1];// just one of the two classes e.g Person and Person
            else cls = [n1, n2];
            var ob = { retArr: dist.distance, cs: cls};
            callb(ob);
        });
       
    }
}

function distFunction(arr, nn, incb) { // get the distance between array and one node
    //var k = 0;
    
    var classes = [];
    var retArr = [];
    for (var i = 0; i < arr.length; i++) {
        var cp = require('child_process');
        
        n = cp.fork('workers/worker_getDistance.js');
        var obj = { a: arr[i], b: nn };
        n.send(obj);
        n.on('message', function (m) {
            // returns distance between n1[i], n2
            var dist = m.distObj.distance;
            var a = m.distObj.a;
            var b = m.distObj.b;
            retArr.push(dist);
            if (classes.indexOf(a) == -1) {
                classes.push(a);
            }
            if (classes.indexOf(b) == -1) {
                classes.push(b);
            }
            if (retArr.length == arr.length) {// all the array is full
                var ob = { retArr: retArr, cs: classes };
               
                incb(ob);
            }
        });
    }
}


