/**
 * @author: Mostafa Bayomi
 * bayomim@tcd.ie
 */
var similarity = require('similarity');

exports.sim = function (n1, n2, callb) {
    var ret;
    if (Array.isArray(n1) && Array.isArray(n2)) {// two arrays of classes
        var ar_ar_sim = 0; // @Selim: to summ all distances between two arrays then / by shortAr.length
        for (var u = 0; u < n1.length; u++) {
            var simi = simFunction(n2, n1[u]);
            ar_ar_sim += simi;
        }
        //normalise .. devide by the array length (no. of multiplication operations)
        ret = ar_ar_sim / n1.length;
    }
    else if (Array.isArray(n1)) { // array and node
        ret = simFunction(n1, n2);
    }
    else if (Array.isArray(n2)) {// node and array
        ret = simFunction(n2, n1);
    }
    else { // two nodes
        var dist = similarity.sim(n1, n2);
        ret = dist;
    }
    return ret;
};

function simFunction(arr, nn) { // get the distance between array and one node
    var similaritySum = 0; // @Selim: to summ all distances and divide by arr length (norm)
    for (var i = 0; i < arr.length; i++) {
        var sim = similarity.sim(arr[i], nn);// distance bet 2 nodes 
        similaritySum += sim;
    }
    similaritySum = similaritySum / arr.length; // @Selim: average (normalise)
    return similaritySum;
}


